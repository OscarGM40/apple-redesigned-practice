            APPLE REDESIGNED WEB CLONE

Source: https://www.youtube.com/watch?v=DCTuw2P6DCU&t=361s&ab_channel=ILWYennefer
Repo: https://github.com/lukef7fywmrp/apple-redesign-yt


Practica con NextJS(con Typescript),TailwindCSS,ReduxToolkit y Sanity CMS.Empezamos creando el proyecto con el starter de siempre:
>next-create-app --example with-tailwindcss . (o el nombre del directorio)

Sanity es un Content Management Platform(CMS).Web aqui(https://www.sanity.io/).Ayuda a los non-developers a manejar el contenido de una web(hace de base de datos pero de forma gráfica,parecido a Wordpress).Es bastante usado entre freelancers.Usa un pseudo-lenguaje llamado Grok para realizar GETs y mutations luego hay que usar su sintaxis.
Asi pues creamos un usuario en su web y creamos un nuevo proyecto(con su cli).Primero hay que instalar su CLI con Node,obviamente:
>npm install -g @sanity/cli 

* puedo ver su ayuda con 'sanity help'

Despues en nuestro proyecto ya creado con next iniciamos un proyecto sanity con:
>sanity init

Me logeo y doy un nombre al proyecto.En cuanto a los datasets vamos a usar el default(production).El output path lo dejamos como lo sugiera

En cuanto a la template con la que empezar dado que vamos a crear un e-commerce elegimos esa template.Creará un predefined schema + sample data(no vamos a subir nada,pero podriamos subir productos ya)
HINT: fijate que al usar Next no tengo que pelearme con react-router-dom gracias a su sistema de rutas embebido

NOTA: ojo con el error que se soluciona copiando el tailwind.config(y el postcss.config tmb hacia falta ??)

IMPORTANTE: el comando sanity init va a crear un folder en la raiz al que tengo que cambiarme para arrancar sanity.Luego cd al folder(con el nombre que le diera antes) y arranco el CMS con sanity start:
>cd XXX && sanity start(desde la Sanity v3 será npx sanity dev,con start arranca el compilado)

NOTA: arrancará en el puerto 3333 y de momento no tendrá productos,vendedores etc(pide autenticarse de nuevo)

Redesplegar la app de hospitales de Angular y de Twitter(cambiar nombre)

Fijate que para entrar al Sanity tengo que autenticarme,parece bastante seguro.

NOTA: el autor recomienda instalar estas libs para autoordenar las clases:
>yarn add -D prettier prettier-plugin-tailwindcss

En cuanto a los iconos de nuevo vamos a usar la lib hero-icons:
>yarn add @heroicons/react

NOTA: para integrar custom fonts con tailwind tengo que hacerlo en el tailwind.config.js,en la propiedad theme.extend y fontFamily.Le doy cualquier valor a la key y ese valor luego lo uso anteponiendole font.Ejemplo:

  theme: {
    extend: {
      fontFamily: {
        poppins: ["Poppins", "sans-serif"], <- esto será font-poppins luego
      },
    },
  },

En el globals.css obviamente traigo la fuente(por CDN tamb valdria):
@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply font-poppins text-[#232428]; <- la llamo cuando quiera con font-poppins
  }
}
INTERESANTE: fijate que el efecto de subrayado en el hover se hace con la pseudoclase :before(y alguna cosilla mas como inset a 0,orogine-left o scale-x-100).E.g.:
  .link {
    @apply relative cursor-pointer text-lg font-medium before:absolute before:inset-x-0 before:-bottom-1.5 before:h-0.5 before:origin-left before:scale-x-0 before:transform before:rounded-bl before:bg-black before:transition-all before:duration-200 hover:before:scale-x-100;
  }
NOTA: this beautiful underline animation I have already used it in Disney Clone
1h35m: fijate que para crear el paralax effect simplemente ponemos un contenedor con 200vh de alto,una primera landing page con a 100vh y un segundo contenedor con un margen negativo de 100vh.
Ojo,que landing page(el hijo del primer contenedor) también tiene que ir en position: sticky;

 <main className="relative h-[200vh] bg-[#e7ecee]"> <- CONTAINER UNO
    <Landing /> HIJO UNO EN STICKY y 100vh
 </main>
 <section className="relative z-40 -mt-[100vh] min-h-screen bg-[#1b1b1b]"> <- CONTAINER DOS CON MARGIN NEGATIVO
    <h1 className="text-center text-4xl font-medium tracking-wide text-white md:text-5xl">
       New Promos
    </h1>
 </section>

 NOTA: para poder usar calc en tailwind tengo que añadir mode: 'jit' en la version 2(no hace falta ya desde la 3) y despues:
 "w-[calc(100%+2rem)]" <- todo junto

 1h42m: vamos a usar HeadlessUI,es una libreria que proporciona componentes ya echos en tailwind(modales,radio buttons,transitions,menus,etc).Hay que instalarla:
 >npm install @headlessui/react@latest
 >npm install @headlessui/vue@latest <- para Vue tmb hay soporte

 NOTA: recuerda que SSR lo que va a intentar es montar todo desde el server,eliminando tiempos de carga.La experiencia es superfluida.

IMPORTANTE: puedo ver el id de proyecto en el IDE de Sanity en la pestaña Datasets.Lo necesitaré en el sanity.js de configuración.Para el token en la pestaña API hay que crear un token(el nombre el que quiera,pero el permiso debe ser de editor, o lectura y escritura)

A continuacion editamos los schemas de Product y Category(fijate que todos los modelos se combinan en el archivo schema en la fn createSchema)

2h22m: para hacer queries a Sanity Studio vamos a usar GROQ(Graph-Relational Object Queries).ES bastante parecido a GraphQL,fetcheando solo lo necesario
NOTA: para meter queries en el IDE hay que ir a modo vision

IMPORTANTE: para poder usar este lenguaje en Next hay que instalar la libreria next-sanity(y otras dos más ligadas a ella,sin embargo no nesitamos la segunda en esta app,pero la instalaremos):
>yarn add next-sanity @portabletext/react @sanity/image-url

TIP: recuerda que la API de Next es terriblemente sencilla,simplemente es crear dentro del folder pages/api cualquier archivo y se creará un endpoint(por ejemplo creo el file pages/api/getCategories y lo que exponga por get lo tengo al apuntar a dominio/api/getCategories(quitando el pages)).Desde luego este framework es la ostia

NOTA:fijate que debo tipar las funciones para SSR,SSG,etc y que me vale para tipar la Page y la response la misma interface

    3h16m IMPLEMENTING REDUX TOOLKIT

Lo primero será instalar la lib para la impl de RTK junto con la impl core de react llamada 'react-redux':
>yarn add @reduxjs/toolkit react-redux

Despues hay que crear un file llamado store.ts con la llamada al configureStore:

* En el store.ts junto todo.Ojo con las utilities de abajo
import { configureStore } from '@reduxjs/toolkit';
import basketReducer from './basketSlice';

export const store = configureStore({
  reducer:{
    basket: basketReducer
  }
})

export type RootState= ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch
* Fin del store.ts

Ahora simplemente es crear slices.Ejemplo del basketSlice:

import { createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import { Product } from "../interfaces/product";
import { RootState } from "./store";

export interface BasketState {
  items: Product[];
  total: number;
}

const initialState: BasketState = {
  items: [],
  total: 0,
};

export const basketSlice = createSlice({
  name: "basket",
  initialState,
  reducers: {
    addToBasket: (state: BasketState, action: PayloadAction<Product>) => {
      state.items = [...state.items, action.payload];
    },
    removeFromBasket: (state:BasketState,action:PayloadAction<{id:string}>) => {
      const index = state.items.findIndex((item)=> item._id === action.payload.id);
      if(index >= 0){
        state.items.splice(index,1)
      }else{
        console.log(`Can't remove product (id: ${action.payload.id}) as its not in the basket`)
      }
    }
  },
});

// hay que exportar todas las actions para poder usarlas
export const {addToBasket,removeFromBasket} = basketSlice.actions;
// selectors are quick accessors:By convention the name is selectXXX ??
export const selectBasketItems = (state:RootState) => state.basket.items;
// fijate que exportamos por default el reducer
export default basketSlice.reducer;

Fijate que desde luego esta mejora de redux reduce código y complejidad.Solo sería investigar un poco si cambia mucho el testing y la asincronia.

    3h 49m IMPLEMENTING REACT HOT TOAST
  
Vamos a usar esta libreria para las notificaciones.Lo primero será instalarla:
>yarn add react-hot-toast
Despues hay que añadir un ToasterProvider como siempre:
import { Toaster } from "react-hot-toast";

<Provider store={store}>
  <Toaster /> <- perfectamente puede ser self-closed
  <App />
</Provider>

4h00 implementing checkout page: fijate que dejo una función para agrupar por una key o por varias con su tipado.
4h23m para formatear los precios vamos a usar la libreria react-currency-formatter:
>npm install react-currency formatter
>npm install -D @types/react-currency-formatter

    4h 50m IMPLEMENTING STRIPE

Abrir sesion: https://stripe.com/docs/checkout/quickstart
Integrar Stripe en Next: https://vercel.com/guides/getting-started-with-nextjs-typescript-stripe <- éste es mejor

PASO UNO CREAR CUENTA/ IMPORTAR CLAVES

Lo primero obviamente es tener un usuario con Stripe asi que me registro con ellos.Despues creo una cuenta(no hacer todo en el ámbito general) y pego como environment variables la clave publica(la cual va con ámbito de browser) y secreta(sin ambito de browser) de ese usuario.

PASO DOS LIBRERIAS

NOTA: la libreria stripe.js tiene que ser cargada desde los servidores de Stripe.Esto crea un desafio al trabajar con Server Side Rendering ya que no hay visión sobre el objeto window(browser) en la parte back de una app con NextJS.Es por esta instrucción que necesitamos esta libreria en Next

import { loadStripe } from '@stripe/stripe-js';

const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);

Asi pues,instalaremos el core y esta otra lib(diria que la necesitara cualquier framework js con con SSR,no sólo NextJS):
>npm install stripe @stripe/stripe-js

PASO TRES CREAR SESION PARA UN PAGO

Si bien en el primer enlace tengo como hacerlo segun framework y lenguaje,el segundo es más completo y mejor orientado,asi que usaremos ese.
Lo primero que vamos a hacer es traer los helpers que han usado ellos usando la API FETCH para un Post y un Get.Incluso están en TS
Despues creo tamb desde el GitHub el retorno de la instancia de stripe en Singleton y creamos la función:

  const createCheckoutSession = async () => {
    setLoading(true);

    // lo primero es crear/abrir una session en Stripe
    const checkoutSession: Stripe.Checkout.Session = await fetchPostJSON("/api/checkout_sessions", {
      items: items,
    });
    // si da un 500 imprimimos el log y paramos
    if ((checkoutSession as any).statusCode === 500) {
      return console.error((checkoutSession as any).message);
    }
    // si no redirigimos a su API,concretamente a checkout.
    // Lo primero es recuperar la instancia de stripe(en Singleton) mediante el helper
    const stripe = await getStripe();
    // despues tratamos de redirigir a su API con el id de session
    const { error } = await stripe!.redirectToCheckout({
      // Make the id field from the Checkout Session creation API response
      // available to this file, so you can provide it as parameter here
      // instead of the {{CHECKOUT_SESSION_ID}} placeholder.
      sessionId: checkoutSession.id,
    });
    // si el redirect fallará error no sería undefined y se imprimirá este console.warn
    console.warn(error.message);

    setLoading(false)
  };
Fijate que esta funcion redirige,asinto,de ahi su nombre.

NOTA: no hacia falta hacer downgrade de los heroicons a la v1,solo que hará vienen de @heroicons/react/20 | 14/solid | outline.Simplemente faltaba el 20 o 24 en el path

Despues hay que crear el endpoint para esa función.Asi pues creamos el file para el endpoint que crea la session para un pago,que hemos llamado:
import type { NextApiRequest, NextApiResponse } from "next";
import Stripe from "stripe";
import { Product } from "../../interfaces/product";
import { urlFor } from "../../sanity";

// instanciamos stripe con nuestra private key
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2022-11-15",
});

export default async function (req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "POST") {
    // fijate que los items nos llegan en req.body.items
    const items: Product[] = req.body.items;

    // Stripe espera los items de una forma concreta,hay que mapear los items
    const transformedItems = items.map((item) => ({
      price_data: {
        currency: "usd",
        product_data: {
          name: item.title,
          images: [urlFor(item.image[0]).url()],
        },
        // normalmente se multiplicara por 100 para que no sean centavos
        // unit_amount: item.price * 100
        unit_amount: item.price * 100,
      },
      quantity: 1,
    }));

    try {
      // creamos los params a mandar
      const params: Stripe.Checkout.SessionCreateParams = {
        payment_method_types: ["card"],
        // puedo restringir los paises de envio
        /* shipping_address_collection:{
          allowed_countries:["US","CA"]
        }, */
        line_items: transformedItems,
        mode: "payment",
        // esto podemos hacerlo al haberlo expuesto en el checkout,parece que el queryParam es opcional pero es mejor hacerlo asi
        success_url: `${req.headers.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
        // fijate que es de donde venimos
        cancel_url: `${req.headers.origin}/checkout`,
        metadata: {
          images: JSON.stringify(items.map((item) => item.image[0].asset.url)),
        },
      };
      // creamos la checkout session usando el id del body(ojo que es una Promise) y con los params para cada pago
      const checkoutSession: Stripe.Checkout.Session = await stripe.checkout.sessions.create(
        params,
      );
      // hay que devolver esa sesion en el response.json()
      res.status(200).json(checkoutSession);
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? error.message 
        : "Internal server error";
      return res.status(500).json({statusCode:500,message:errorMessage})
    }
  } else{
    // esto lo recomienda Stripe,pero a saber
    res.setHeader("Allow","POST")
    res.status(405).end("Method Not Allowed")
    }
  }
Siempre puedo venir aqui,no es complicado para nada,asinto.Ojo con los requerimientos de Stripe,que solo usa integers parece

5h19: success page: si el usuario paga exitosamente está redirigiendo a /success?session_id=[id].Falta hacer esa pagina
NOTA: fijate que display: inline-flex lo que me sirvió es para que el contenedor no esté en block,ya que se pone así por defecto.Interesante

5h31m: vamos a instalar la libreria react-responsive.Esta libreria es muy parecida al hook useMedia que usa Amiga.Permite determinar condiciones en base a aspect-ratios,breakpoints,etc(realmente tiene muchas opciones):

>yarn add react-responsive

import { useMediaQuery } from "react-responsive";

  const isTabletOrMobile = useMediaQuery({
    query: "(max-width: 1024px)",
  });

IMPORTANTE: parece que hay que esperar a que se monte todo el DOM mediante un boleano que pasamos a true en el primer instante que pueda el useEffect.Entiendo que esto lo que hace es asegurarse que todo se ejecuta tras montarse el DOM ??:

  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  NOTA: confirmado que tanto useEffect como useLayoutEffect se disparan tras el primer render y despues de cada update/re-render.Esto no era asi antes con los lifecycles como componentDidMount. Luego ese boleano se asegura que la UI esta completamente renderizada y el calculo del mediaQuery no va a ser prematuro o dar un falso positivo.Desde luego es importantisimo esto,un efecto siempre va despues del renderizado de la UI.
  TIP:los efectos no bloquean la UI de seguir pintandose ya que son acciones asincronas

  NOTA: esto también cambió para intentar pensar más como un usuario.Un efecto no se dispara cuando un componente ha sido montado,sino cuando ha sido pintado(vista de un usuario).Parecido al approach de react-testing-library
  Dejo un articulo muy interesante en favoritos que debo consultar y memorizar/razonar

6h 05m : implement authentication with NextAuth.Realmentes es una buena idea usar su módulo de Auth.Ellos ya dedican un equipo de trabajo a esta parte,para qué reinventar la rueda?.Además que tiene un montón de providers que ya usan OAuth.Es un modulo aparte que hay que instalar:

>yarn add next-auth
>yarn add next-auth-sanity <- tmb necesitamos el adapter

Usaremos SSR y nos conectaremos con el Sanity Adapter

PASO UNO: crear el file pages/api/auth/[...nextauth].js. 

import NextAuth from 'next-auth'
import GoogleProvider from 'next-auth/providers/google'
import { SanityAdapter } from 'next-auth-sanity';
import { sanityClient } from '../../../sanity';

export default NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
  session: {
    strategy:"jwt"
  },
  secret: process.env.NEXTAUTH_SECRET,
  adapter: SanityAdapter(sanityClient)
});

PASO DOS: usar el HOC <SessionProvider></SessionProvider>  que viene de next-auth/react en el punto más alto(el _app.tsx).También hay que sacar la session de las pageProps

import { SessionProvider } from "next-auth/react";

function MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {
  return (
    <SessionProvider session={session}>
      <Provider store={store}>
        <Toaster />
        <Component {...pageProps} />
      </Provider>
    </SessionProvider>
  );
}

export default MyApp;

PASO TRES: hacer fetch de la session mediante SSR en el index:

* En el index.ts
import { getSession } from "next-auth/react";
import type { Session } from "next-auth";

interface Props {
  categories: Category[];
  products: Product[];
  // ojo que es un import type { Session } from "next-auth"
  session: Session | null
}

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  //  si usa fetch todo esta funcion tiene que estar en el browser.Por eso tengo visión sobre fetch,porque es el browser este scope(y por lo mismo la env en los helpers es del tipo browser y necesita NEXT_PUBLIC_...)Interesante

  const [categories, products,session] = await Promise.all([
    await fetchCategories(),
    await fetchProducts(),
    // este hook necesita el contexto como arg y viene de next-auth/react
    await getSession(ctx)
  ]);

  return {
    // la funcion getSSR retorna un objeto llamado props,careful
    props: {
      categories,
      products,
      session
    },
  };
};

PASO CUATRO: obtener las keys de Google.Ir a console.cloud.google.com y crear un nuevo proyecto
Ir a Credentials y antes de poder tener las keys(es decir acceder a OAuth) hay que configurar la pantalla de consentimiento.El botón estará por ahi(elegit tipo external ya que queremos que sea publica)El resto puedo dar en continuar.
Una vez configurado esto deberia ver "Create Credentials" donde estaba este boton anteriormente
De nuevo estamos interesados en las de tipo OAuth(no confundir con Claves de API,queremos que sean para la Auth solo).De momento no hace falta poner las URis,simplemente terminamos y nos darán las keys a llevar a las env.
Ojo que en Next habrá que agregar "lh3.googleusercontent.com" a la whitelist de images para ver el avatar de Google.

PASO CINCO: usar el hook useSession cuando quiera para acceder a la session y las funciones signIn o signOut de next-auth/react:

import { signIn, signOut, useSession } from "next-auth/react";

const Header = () => {
  // esto es como session.data, ya sacamos la prop data directamente
  const { data: session } = useSession();

 {session ? (
    <Image
      src={
        session.user?.image ||
        "https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y"
      }
      alt=""
      className="cursor-pointer rounded-full"
      width={34}
      height={34}
      onClick={() => signOut()}
    />
  ) : (
    <UserIcon className="headerIcon" onClick={() => signIn()} />
  )}

PASO SEIS(6h30m): implementar el adapter de Sanity.Queremos que cada vez que un user de Google se logee también se cree un user y session en Sanity Studio.
NextAuth ya tiene un adapter para poder integrarse con Sanity:
> yarn add next-auth-sanity

NOTA: implementar un adapter puede ser un punto de vulnerabilidad ya que Sanity tmb almacenará información confidencial(esto es aplicable a cualquier adapter).Se recomienda usar adapters de NextAuth con responsabilidad.

TIP: solo vamos a usar su adapter,no su autenticacion(como ya he usado la de Spotify por ejemplo), asi que no necesitamos añadir nada al arreglo de providers,solo al de adapters(que entiendo que con uno solo no hace falta que sea un array pero lo seria con varios??):
IMPORTANTE: en el momento que use un adapter necesito especificar el tipo de session y darle un secret(aunque en local si funcionaría,en prod no) 

import { SanityAdapter } from 'next-auth-sanity';
import { sanityClient } from '../../../sanity';

...  
 session: {
    strategy:"jwt"
  },
  secret: process.env.NEXTAUTH_SECRET,
  adapter: SanityAdapter(sanityClient)

Fijate que el argumento sanityClient usa todas las keys del IDE que ya tengo en las env.
Y no queremos la strategy database porque con el token que se intercambiarán ellos nos vale(diria que lo sacará despues Sanity del payload del token todo y asi sabe tmb si la session es válida)

IMPORTANTE: aún falta configurar en Sanity el Schema para un user,una account y el token.Esto va en el file schema.js que crea los schemas en el Sanity Studio:

en el schema.js(el que junte los schemas)
// PARTE EXTRA necesaria para integrar Sanity como adapter de NextAuth
import { user, account, verificationToken } from "next-auth-sanity/schemas";

export default createSchema({
  // We name our schema
  name: "default",
  // Then proceed to concatenate our document type
  // to the ones provided by any plugins that are installed
  types: schemaTypes.concat([
    // The following are document types which will appear
    // in the studio.
    product,
    category,
    blockContent,
    localeText,
    localeBlockContent,
    localeString,
    user,
    account
  ]),
});

Al final no necesitamos el schema de verificationToken(parece que era para cuando se use Sanity como Provider pero solo está como adapter aqui)
En cuanto añada los schemas deberia ver al user y la session del que se loguee en la app

OJO, para que todo funcione hay que ir al proyecto de Sanity,a la pestaña API y añadir los dominios que necesite a Origin además de checkear a true el check Allow credentials(en resumen,habilitar los CORS entre ellos)

6h42m: realizar el deploy final a prod.Fijate que hay que desplegar el Sanity Studio y la app web(por separado).
1- Para desplegar el Sanity simplemente ejecutar "sanity deploy".Nos dará un dominio tipo (<my-name>.sanity.studio)
Al final me dió esta: https://apple-redesigned-practice.sanity.studio/desk
Fijate que hay que hacer login asi que está seguro todo,entiendo